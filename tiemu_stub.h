/*
 * This file was generated by dbusxml2cpp version 0.6
 * Command line was: dbusxml2cpp -p tiemu_stub tiemu_dbus.xml
 *
 * dbusxml2cpp is Copyright (C) 2006 Trolltech ASA. All rights reserved.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef TIEMU_STUB_H_1172162680
#define TIEMU_STUB_H_1172162680

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.ticalc.lpg.tiemu.TiEmuDBus
 */
class OrgTicalcLpgTiemuTiEmuDBusInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.ticalc.lpg.tiemu.TiEmuDBus"; }

public:
    OrgTicalcLpgTiemuTiEmuDBusInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgTicalcLpgTiemuTiEmuDBusInterface();

public Q_SLOTS: // METHODS
    inline QDBusReply<bool> debug_file(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(in0);
        return callWithArgumentList(QDBus::Block, QLatin1String("debug_file"), argumentList);
    }

    inline QDBusReply<int> emulated_calc_type()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("emulated_calc_type"), argumentList);
    }

    inline QDBusReply<int> emulated_hw_version()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("emulated_hw_version"), argumentList);
    }

    inline QDBusReply<QString> emulated_os_version()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("emulated_os_version"), argumentList);
    }

    inline QDBusReply<bool> enter_debugger()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("enter_debugger"), argumentList);
    }

    inline QDBusReply<bool> execute_command(const QString &command)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(command);
        return callWithArgumentList(QDBus::Block, QLatin1String("execute_command"), argumentList);
    }

    inline QDBusReply<bool> image_loaded()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("image_loaded"), argumentList);
    }

    inline QDBusReply<bool> ready_for_transfers()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("ready_for_transfers"), argumentList);
    }

    inline QDBusReply<bool> reset_calc(bool in0)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(in0);
        return callWithArgumentList(QDBus::Block, QLatin1String("reset_calc"), argumentList);
    }

    inline QDBusReply<bool> send_file(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(in0);
        return callWithArgumentList(QDBus::Block, QLatin1String("send_file"), argumentList);
    }

    inline QDBusReply<bool> send_files(const QStringList &in0)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(in0);
        return callWithArgumentList(QDBus::Block, QLatin1String("send_files"), argumentList);
    }

    inline QDBusReply<bool> turn_calc_on()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("turn_calc_on"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace org {
  namespace ticalc {
    namespace lpg {
      namespace tiemu {
        typedef ::OrgTicalcLpgTiemuTiEmuDBusInterface TiEmuDBus;
      }
    }
  }
}
#endif
